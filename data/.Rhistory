crime <- read.csv("http://datasets.flowingdata.com/crimeRatesByState2005.csv")
str(crime)
plot(crime$murder, crime$burglary)
pairs(crime[,-1])
library(psych)
pairs.panels(crime[,-1])
crime[crime$murder>30,]
pairs.panels(crime[-10,-1])
crime[crime$population==max(crime$population),]
pairs.panels(crime[-c(1,10),-1])
crime2 <- crime[-c(1,10),] #united steates 와 district of columbia 제거
round(cor(crime2[,-1]),2)
library(corrplot)
corrplot(cor(crime[,-1])) #시각화
symbols(crime2$murder, crime2$burglary, circle=sqrt(crime2$population),inches=0.5)
library(rgl)
plot3d(crime2$murder, crime2$burglary, crime2$population, type="s", col="blue",
xlab="murder", ylab="burglary", zlab="population")
plot3d(crime2$murder, crime2$burglary, crime2$population, type="s", col="blue",
xlab="murder", ylab="burglary", zlab="population")
birth <- read.csv("http://datasets.flowingdata.com/birth-rate.csv")
head(birth)
birth["X2008"]
summary(birth["X2008"])
hist(birth$X2008)
hist(birth$X2008, xlab="Birth", main=NA)
hist(birth$X2008, breaks=20, xlab="Birth", main=NA)
hist(birth$X2008, xlab="Birth", main=NA)
hist(birth$X2008, breaks=20, xlab="Birth", main=NA)
?hist
density(birth$x2008)
density(birth$X2008)
birth$X2008 <- na.omit(birth$X2008)
birth$X2008 <- na.omit(birth$X2008)
density(birth$X2008)
birth["X2008"]
birth$X2008 <- na.omit(birth$X2008)
summary(birth["X2008"])
density(birth$X2008, na.rm=TRUE)
dense <- density(birth$X2008, na.rm=TRUE)
dense
str(dense)
lines(dense, col="blue",lwd=2))
lines(dense, col="blue",lwd=2)
dense <- density(birth$X2008, na.rm=TRUE)
lines(dense, col="blue",lwd=2)
lines(dense, col="blue")
lines(dense, col="blue", lwd=2)
hist(dense, freq=FALSE)
birth2008 <- na.omit(birth$X2008)
dense <- density(birth2008)
hist(birth2008, freq=FALSE)
lines(dense, col="blue", lwd=2)
lines(density(birth2008, na.rm = TRUE, adjust=0.5), col="red")
lines(density(birth2008, na.rm = TRUE, adjust=0.5), col="red", lwd=2)
birth <- read.csv("http://datasets.flowingdata.com/birth-rate.csv")
head(birth)
birth["X2008"]
summary(birth["X2008"])
hist(birth$X2008, xlab="Birth", main=NA)
hist(birth$X2008, breaks=20, xlab="Birth", main=NA) #breaks=빈도 : 조금더 촘촘하게
birth2008 <- na.omit(birth$X2008)
dense <- density(birth2008)
hist(birth2008, freq=FALSE)
lines(dense, col="blue", lwd=2)
lines(density(birth2008, na.rm = TRUE, adjust=0.5), col="red", lwd=2)
library(MASS)
attach(geyser)
density1 <- kde2d(waiting, duration, n=25)
density2 <- ked2d(waiting, duration, n=100)
density2 <- kde2d(waiting, duration, n=100)
summary(geyser)
density1 <- kde2d(waiting, duration, n=25) #2차원 평면을 선으로 추정하겠다.
image(density1, xlab="waiting", ylab="duration")
summary(density1)
str(density1)
density2 <- kde2d(waiting, duration, n=100)
image(density2, xlab="waiting", ylab="duration")
contour(density)
contour(density1)
persp3d(density2, back="lines", col="skyblue",
xlab="waiting", ylab="duration")
library(rgl)
persp3d(density2, back="lines", col="skyblue",
xlab="waiting", ylab="duration")
image(density, xlab="waiting", ylab="duration")
density <- kde2d(waiting, duration, n=25) #2차원 평면을 선으로 추정하겠다.
summary(density)
str(density)
image(density, xlab="waiting", ylab="duration")
contour(density) #고등선으로 표시
library(rgl)
persp3d(density2, back="lines", col="skyblue",
xlab="waiting", ylab="duration")
persp3d(density2, back="lines", col="skyblue",
xlab="waiting", ylab="duration")
birth <- read.csv("http://datasets.flowingdata.com/birth-rate.csv")
head(birth,10)
head(birth$year, 20)
str(birth)
head(birth,10)
?melt
melt
?melt
library(reshape2)
?melt
str(birth)
birth_year <- melt(birth, id.vars = Country)
birth_year <- melt(birth, id.vars = birth$Country)
birth_year <- melt(birth, id.variables = birth$Country)
birth_year <- melt(birth, id.vars = "Country")
birth_year
head(birth_year,20)
head(birth_year)
?names
names(birth_year$variable) <- "year"
head(birth_year)
colnames(birth_year)[2:3] <- c("year","birth")
head(birth_year)
head(birth,10)
str(birth)
birth_year <- melt(birth, id.vars = "Country")
colnames(birth_year)[2:3] <- c("year","birth")
head(birth_year)
birth_year$year <- substr(birth_year$year,2,6)
head(birth_year)
birth_year$year <- substr(birth_year$year,2,5)
head(birth_year)
birth <- read.csv("http://datasets.flowingdata.com/birth-rate.csv")
head(birth,10)
str(birth)
library(reshape2)
birth_year <- melt(birth, id.vars = "Country")
colnames(birth_year)[2:3] <- c("year","birth")
head(birth_year)
birth_year$year <- substr(birth_year$year,2,5)
head(birth_year)
summary((birth_year))
birth_year$year <- as.numeric(birth_year$year)
summary((birth_year)) #year 는 factor가 아닌 char로 인식함
?histogram
library(lattice)
?histogram
histogram(~birth+year, data=birth_year)
windows()
histogram(~birth+year, data=birth_year)
summary((birth_year)) #year 는 factor가 아닌 char로 인식함
library(lattice)
windows()
histogram(~birth|year, data=birth_year)
birth_year$year <- as.character(birth_year$year)
histogram(~birth|year, data=birth_year)
histogram(~birth|year, data=birth_year)
histogram(~birth|year, data=birth_year, layout=c(10,5))
h <- histogram(~birth|year, data=birth_year, layout=c(10,5)) #layout 10년 기준 단위로 나눈다.
update(h, index.cond = list(c(41:50, 31:40,21:30,11:20,1:10)))
subset(birth_year, Country="Palau" & birth > 100)
birth_year<- subset(birth_year, Country="Palau" & birth > 100)
head(birth_year)
birth_year<- subset(birth_year, Country="Palau" & birth > 100)
head(birth_year)
birth_year<- subset(birth_year, Country="Palau" & birth < 100)
head(birth_year)
birth_year <- subset(birth_year, birth < 100)
head(birth_year)
h <- histogram(~birth|year, data=birth_year, layout=c(10,5)) #layout 10년 기준 단위로 나눈다.
h
h <- histogram(~birth|year, data=birth_year, layout=c(10,5)) #layout 10년 기준 단위로 나눈다.
update(h, index.cond = list(c(41:50, 31:40,21:30,11:20,1:10)))
h
setwd("C:/Users/PC/Desktop/2학년 2학기/탐색적 데이터 분석/DATA")
train <- read.csv("train.csv")
head(train)
tmp <- strptime(train$datetime, format="%Y-%m-%d %H")
train$year <- format(tmp,"%Y")
train$month <- format(tmp,"%m")
train$day <- format(tmp, "%d")
train$time <- format(tmp,"%H")
train$weekday <- format(tmp, "%a")
train$weekday <- factor(train$weekday,
levels=c("월","화","수","목","금","토","일"))
train$week <- format(tmp, "%V")  #주 별로 분류 (week 만들어줌)
library(psych)
pairs.panels(train[c("atemp","temp","humidity","windspeed","weather","workingday")], data=train)
pairs.panels(train[c("atemp","temp","humidity","windspeed","weather","workingday")], data=train)
library(dplyr)
library(plyr)
setwd("C:/Users/PC/Desktop/2학년 2학기/탐색적 데이터 분석/DATA")
train=read.csv("train.csv")
train$year = substr(train[,'datetime'],1,4)
train$month = substr(train[,'datetime'],6,7)
train$day = substr(train[,'datetime'],9,10)
train$time = substr(train[,'datetime'],12,13)
weekday.tmp = format(as.Date(train[,'datetime']), "%a")
weekday.tmp = factor(weekday.tmp, levels=c("월", "화", "수", "목", "금", "토", "일"))
train$weekday = weekday.tmp
library(psych)
pairs.panels(train[,c("atemp","temp","humidity", "windspeed", "weather", "workingday")],
data=train)
library(plyr)
daily=ddply(train, ~ day + month, summarize,
count=mean(count),
count_c=mean(casual),
count_r=mean(registered),
r_ratio=mean(registered/count))
library(ggplot2)
library(lattice)
library(lubridate)
par(mfcol=c(1,3))
plot(count~humidity, data=train)
plot(casual~humidity, data=train)
plot(registered~humidity, data=train)
cor(train[,c('count','casual','registered', 'humidity')])
library("gridExtra")
install.packages("gridExtra")
library("gridExtra")
g1=ggplot(train, aes(x=humidity, y=count, group=month, color=month))+
geom_point()+
geom_smooth()
g2=ggplot(train, aes(x=humidity, y=casual, group=month, color=month))+
geom_point()+
geom_smooth()
g3=ggplot(train, aes(x=humidity, y=registered, group=month, color=month))+
geom_point()+
geom_smooth()
grid.arrange(g2,g3, nrow=1, ncol=2)
windows();g1
ind=which(train$year=='2011' & train$month=='09')
plot(count~humidity, data=train[ind,],main='humidity vs count',
xlab='humidity', ylab='count', ylim=c(0,400))
plot(casual~humidity, data=train[ind,],main='humidity vs casual',
xlab='humidity', ylab='count', ylim=c(0,400))
plot(registered~humidity, data=train[ind,],main='humidity vs registered',
xlab='humidity', ylab='count', ylim=c(0,400))
cor(train[ind,c('count','casual','registered', 'humidity')])
ind=which(train$year=='2011' & train$month=='02')
plot(count~humidity, data=train[ind,],main='humidity vs count',
xlab='humidity', ylab='count', ylim=c(0,700))
plot(casual~humidity, data=train[ind,],main='humidity vs casual',
xlab='humidity', ylab='count', ylim=c(0,700))
plot(registered~humidity, data=train[ind,],main='humidity vs registered',
xlab='humidity', ylab='count', ylim=c(0,700))
cor(train[ind,c('count','casual','registered', 'humidity')])
train%>% head
plot(count~windspeed, data=train)
plot(casual~windspeed, data=train)
plot(registered~windspeed, data=train)
cor(train[,c('count','casual','registered', 'humidity')])
cor(train[,c('count','casual','registered', 'windspeed')])
g1=ggplot(train, aes(x=windspeed, y=count, group=month, color=month))+
geom_point()+
geom_smooth()
g2=ggplot(train, aes(x=windspeed, y=casual, group=month, color=month))+
geom_point()+
geom_smooth()
g3=ggplot(train, aes(x=windspeed, y=registered, group=month, color=month))+
geom_point()+
geom_smooth()
grid.arrange(g2,g3, nrow=1, ncol=2)
windows();g1
windows();g1
cor(train[,c('count','casual','registered', 'windspeed')])
train%>% head
g1=ggplot(train, aes(x=windspeed, y=count, group=factor(workingday), color=factor(workingday)))+
geom_point()+
geom_smooth()
g2=ggplot(train, aes(x=windspeed, y=casual, group=factor(workingday), color=factor(workingday)))+
geom_point()+
geom_smooth()
g3=ggplot(train, aes(x=windspeed, y=registered, group=factor(workingday), color=factor(workingday)))+
geom_point()+
geom_smooth()
grid.arrange(g2,g3, nrow=1, ncol=2)
ind <- which(train$workingday==0 & train$windspeed>30)
cor(train[ind,c('count','casual','registered','windspeed')])
ind <- which(train$workingday==1 & train$windspeed>30)
cor(train[ind,c('count','casual','registered','windspeed')])
count_name='count'
cor(train[ind,count_name])
count_name='count'
cor(train[ind, count_name])
cor(train[ind, count_name], train[ind, 'humidity'])
ccf(train[ind, count_name], train[ind, 'humidity'], lag.max=5)
par(mfcol=c(1,1))
ccf(train[ind, count_name], train[ind, 'humidity'], lag.max=5)
